/*
 * HTML5 Boilerplate
 *
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */
html, button, input, select, textarea {color: #222;}
body {font-size: 1em; line-height: 1.4;}
::-moz-selection {background: #b3d4fc; text-shadow: none;}
::selection {background: #b3d4fc; text-shadow: none;}
hr {display: block; height: 1px; border: 0; border-top: 1px solid #ccc; margin: 1em 0; padding: 0;}
img {vertical-align: middle;}
fieldset {border: 0; margin: 0; padding: 0;}
textarea {resize: vertical;}
.chromeframe {margin: .2em 0; background: #ccc; color: #000; padding: .2em 0;}

/* ==========================================================================
   Helper classes
   ========================================================================== */
/*
### `.g-ir`

Add the `.g-ir` class to any element you are applying image-replacement to. When
replacing an element's content with an image, make sure to also set a specific
`background-image: url(pathtoimage.png);`, `width`, and `height` so that your
replacement image appears.

#### `.g-hidden`

Add the `.g-hidden` class to any elements that you want to hide from all
presentations, including screen readers. It could be an element that will be
populated later with JavaScript or an element you will hide with JavaScript. Do
not use this for SEO keyword stuffing. That is just not cool.

#### `.g-visuallyhidden`

Add the `.g-visuallyhidden` class to hide text from browsers but make it
available for screen readers. You can use this to hide text that is specific to
screen readers but that other users should not see. [About invisible
content](http://www.webaim.org/techniques/css/invisiblecontent/), [Hiding content for
accessibility](http://snook.ca/archives/html_and_css/hiding-content-for-accessibility),
[HTML5 Boilerplate issue/research](https://github.com/h5bp/html5-boilerplate/issues/194/).

#### `.g-invisible`

Add the `.g-invisible` class to any element you want to hide without affecting
layout. When you use `display: none` an element is effectively removed from the
layout. But in some cases you want the element to simply be invisible while
remaining in the flow and not affecting the positioning of surrounding content.

#### `.g-clearfix`

Adding `.g-clearfix` to an element will ensure that it always fully contains its
floated children. There have been many variants of the clearfix hack over the
years, and there are other hacks that can also help you to contain floated
children, but the HTML5 Boilerplate currently uses the [micro clearfix]
(http://nicolasgallagher.com/micro-clearfix-hack/). */

.g-ir {background-color: transparent; border: 0; overflow: hidden; *text-indent: -9999px;}
.g-ir:before {content: ""; display: block; width: 0; height: 150%;}
.g-hidden {display: none!important; visibility: hidden;}
.g-visuallyhidden {border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px;}
.g-visuallyhidden.focusable:active, .g-visuallyhidden.focusable:focus {clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto;}
.g-invisible {visibility: hidden;}
.g-clearfix:before, .g-clearfix:after {content: " "; display: table;}
.g-clearfix:after {clear: both;}
.g-clearfix {*zoom: 1;}